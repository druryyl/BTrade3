package com.elsasa.btrade3.ui.theme
import androidx.compose.ui.graphics.Color

// Vintage Soft Teal Color Scheme
// Primary: Soft Teal family - calming and elegant
// Secondary: Warm Peach-Coral - vintage complement to teal
// Tertiary: Dusty Rose-Pink - soft vintage accent
// Light theme: Vintage soft pastels with cream backgrounds
// Dark theme: Rich jewel tones with deep charcoal backgrounds

val primaryLight = Color(0xFF2A7A7F) // Darker teal for better readability
val onPrimaryLight = Color(0xFFFFFFFF)
val primaryContainerLight = Color(0xFFE0F7F8) // Soft teal container
val onPrimaryContainerLight = Color(0xFF1A4B4F)
val secondaryLight = Color(0xFFE0A96D) // Warm peach-gold
val onSecondaryLight = Color(0xFFFFFFFF)
val secondaryContainerLight = Color(0xFFFBF2E8) // Cream peach
val onSecondaryContainerLight = Color(0xFF8B4513)
val tertiaryLight = Color(0xFFD4A5A5) // Dusty rose
val onTertiaryLight = Color(0xFFFFFFFF)
val tertiaryContainerLight = Color(0xFFF5EEEE) // Light dusty rose
val onTertiaryContainerLight = Color(0xFF8B4A4A)
val errorLight = Color(0xFFCD5C5C) // Soft vintage red
val onErrorLight = Color(0xFFFFFFFF)
val errorContainerLight = Color(0xFFFFE6E6)
val onErrorContainerLight = Color(0xFF8B2635)
val backgroundLight = Color(0xFFFCFBF9) // Warm cream white
val onBackgroundLight = Color(0xFF3D3D3D)
val surfaceLight = Color(0xFFFFFFFD) // Soft ivory
val onSurfaceLight = Color(0xFF3D3D3D)
val surfaceVariantLight = Color(0xFFF5F3F0) // Warm light gray
val onSurfaceVariantLight = Color(0xFF6B6B6B)
val outlineLight = Color(0xFFA8A8A8)
val outlineVariantLight = Color(0xFFD0CCC7)
val scrimLight = Color(0xFF000000)
val inverseSurfaceLight = Color(0xFF3D3D3D)
val inverseOnSurfaceLight = Color(0xFFFAF9F7)
val inversePrimaryLight = Color(0xFFA8E6EA) // Light teal
val surfaceDimLight = Color(0xFFF0EFED)
val surfaceBrightLight = Color(0xFFFFFFFD)
val surfaceContainerLowestLight = Color(0xFFFFFFFF)
val surfaceContainerLowLight = Color(0xFFFAF9F7)
val surfaceContainerLight = Color(0xFFF5F3F0)
val surfaceContainerHighLight = Color(0xFFEFECE9)
val surfaceContainerHighestLight = Color(0xFFE9E6E2)

val primaryLightMediumContrast = Color(0xFF1E5F63)
val onPrimaryLightMediumContrast = Color(0xFFFFFFFF)
val primaryContainerLightMediumContrast = Color(0xFF2A7A7F)
val onPrimaryContainerLightMediumContrast = Color(0xFFFFFFFF)
val secondaryLightMediumContrast = Color(0xFFCD8B47)
val onSecondaryLightMediumContrast = Color(0xFFFFFFFF)
val secondaryContainerLightMediumContrast = Color(0xFFE0A96D)
val onSecondaryContainerLightMediumContrast = Color(0xFFFFFFFF)
val tertiaryLightMediumContrast = Color(0xFFC08080)
val onTertiaryLightMediumContrast = Color(0xFFFFFFFF)
val tertiaryContainerLightMediumContrast = Color(0xFFD4A5A5)
val onTertiaryContainerLightMediumContrast = Color(0xFFFFFFFF)
val errorLightMediumContrast = Color(0xFFB94A4A)
val onErrorLightMediumContrast = Color(0xFFFFFFFF)
val errorContainerLightMediumContrast = Color(0xFFCD5C5C)
val onErrorContainerLightMediumContrast = Color(0xFFFFFFFF)
val backgroundLightMediumContrast = Color(0xFFFCFBF9)
val onBackgroundLightMediumContrast = Color(0xFF3D3D3D)
val surfaceLightMediumContrast = Color(0xFFFFFFFD)
val onSurfaceLightMediumContrast = Color(0xFF2A2A2A)
val surfaceVariantLightMediumContrast = Color(0xFFF5F3F0)
val onSurfaceVariantLightMediumContrast = Color(0xFF555555)
val outlineLightMediumContrast = Color(0xFF888888)
val outlineVariantLightMediumContrast = Color(0xFFA8A8A8)
val scrimLightMediumContrast = Color(0xFF000000)
val inverseSurfaceLightMediumContrast = Color(0xFF3D3D3D)
val inverseOnSurfaceLightMediumContrast = Color(0xFFFAF9F7)
val inversePrimaryLightMediumContrast = Color(0xFFA8E6EA)
val surfaceDimLightMediumContrast = Color(0xFFE5E2DF)
val surfaceBrightLightMediumContrast = Color(0xFFFFFFFD)
val surfaceContainerLowestLightMediumContrast = Color(0xFFFFFFFF)
val surfaceContainerLowLightMediumContrast = Color(0xFFFAF9F7)
val surfaceContainerLightMediumContrast = Color(0xFFEFECE9)
val surfaceContainerHighLightMediumContrast = Color(0xFFE9E6E2)
val surfaceContainerHighestLightMediumContrast = Color(0xFFDDD9D5)

val primaryLightHighContrast = Color(0xFF1A4B4F)
val onPrimaryLightHighContrast = Color(0xFFFFFFFF)
val primaryContainerLightHighContrast = Color(0xFF1E5F63)
val onPrimaryContainerLightHighContrast = Color(0xFFFFFFFF)
val secondaryLightHighContrast = Color(0xFF8B4513)
val onSecondaryLightHighContrast = Color(0xFFFFFFFF)
val secondaryContainerLightHighContrast = Color(0xFFCD8B47)
val onSecondaryContainerLightHighContrast = Color(0xFFFFFFFF)
val tertiaryLightHighContrast = Color(0xFF8B4A4A)
val onTertiaryLightHighContrast = Color(0xFFFFFFFF)
val tertiaryContainerLightHighContrast = Color(0xFFC08080)
val onTertiaryContainerLightHighContrast = Color(0xFFFFFFFF)
val errorLightHighContrast = Color(0xFF8B2635)
val onErrorLightHighContrast = Color(0xFFFFFFFF)
val errorContainerLightHighContrast = Color(0xFFB94A4A)
val onErrorContainerLightHighContrast = Color(0xFFFFFFFF)
val backgroundLightHighContrast = Color(0xFFFCFBF9)
val onBackgroundLightHighContrast = Color(0xFF3D3D3D)
val surfaceLightHighContrast = Color(0xFFFFFFFD)
val onSurfaceLightHighContrast = Color(0xFF000000)
val surfaceVariantLightHighContrast = Color(0xFFF5F3F0)
val onSurfaceVariantLightHighContrast = Color(0xFF2A2A2A)
val outlineLightHighContrast = Color(0xFF555555)
val outlineVariantLightHighContrast = Color(0xFF888888)
val scrimLightHighContrast = Color(0xFF000000)
val inverseSurfaceLightHighContrast = Color(0xFF3D3D3D)
val inverseOnSurfaceLightHighContrast = Color(0xFFFFFFFF)
val inversePrimaryLightHighContrast = Color(0xFFE0F7F8)
val surfaceDimLightHighContrast = Color(0xFFD0CCC7)
val surfaceBrightLightHighContrast = Color(0xFFFFFFFD)
val surfaceContainerLowestLightHighContrast = Color(0xFFFFFFFF)
val surfaceContainerLowLightHighContrast = Color(0xFFF5F3F0)
val surfaceContainerLightHighContrast = Color(0xFFE9E6E2)
val surfaceContainerHighLightHighContrast = Color(0xFFDDD9D5)
val surfaceContainerHighestLightHighContrast = Color(0xFFD0CCC7)

// Dark Theme - Rich jewel tones with sophisticated depth
val primaryDark = Color(0xFF4ECDC4) // Bright teal for dark backgrounds
val onPrimaryDark = Color(0xFF1A4B4F)
val primaryContainerDark = Color(0xFF2A5F63)
val onPrimaryContainerDark = Color(0xFFB8F1F4)
val secondaryDark = Color(0xFFFFB366) // Warm amber-orange
val onSecondaryDark = Color(0xFF4A2C0A)
val secondaryContainerDark = Color(0xFF8B4513)
val onSecondaryContainerDark = Color(0xFFFBF2E8)
val tertiaryDark = Color(0xFFE8B4B8) // Soft rose-gold
val onTertiaryDark = Color(0xFF4A2626)
val tertiaryContainerDark = Color(0xFF8B4A4A)
val onTertiaryContainerDark = Color(0xFFF5EEEE)
val errorDark = Color(0xFFFF8A80) // Soft coral error
val onErrorDark = Color(0xFF4A1A1A)
val errorContainerDark = Color(0xFF8B2635)
val onErrorContainerDark = Color(0xFFFFE6E6)
val backgroundDark = Color(0xFF1A1E1E) // Deep charcoal-teal
val onBackgroundDark = Color(0xFFE8E6E3)
val surfaceDark = Color(0xFF242929) // Rich dark teal-gray
val onSurfaceDark = Color(0xFFE8E6E3)
val surfaceVariantDark = Color(0xFF3A4040) // Dark teal-gray variant
val onSurfaceVariantDark = Color(0xFFD0CCC7)
val outlineDark = Color(0xFF9A9694)
val outlineVariantDark = Color(0xFF4F4F4F)
val scrimDark = Color(0xFF000000)
val inverseSurfaceDark = Color(0xFFE8E6E3)
val inverseOnSurfaceDark = Color(0xFF2E3333)
val inversePrimaryDark = Color(0xFF2A7A7F)
val surfaceDimDark = Color(0xFF1A1E1E)
val surfaceBrightDark = Color(0xFF404545)
val surfaceContainerLowestDark = Color(0xFF151919)
val surfaceContainerLowDark = Color(0xFF222626)
val surfaceContainerDark = Color(0xFF2E3333)
val surfaceContainerHighDark = Color(0xFF394040)
val surfaceContainerHighestDark = Color(0xFF444B4B)

val primaryDarkMediumContrast = Color(0xFF5DD4D0)
val onPrimaryDarkMediumContrast = Color(0xFF0F3A3E)
val primaryContainerDarkMediumContrast = Color(0xFF4ECDC4)
val onPrimaryContainerDarkMediumContrast = Color(0xFF000000)
val secondaryDarkMediumContrast = Color(0xFFFFD699)
val onSecondaryDarkMediumContrast = Color(0xFF2A1A05)
val secondaryContainerDarkMediumContrast = Color(0xFFE0A96D)
val onSecondaryContainerDarkMediumContrast = Color(0xFF000000)
val tertiaryDarkMediumContrast = Color(0xFFF2C4C8)
val onTertiaryDarkMediumContrast = Color(0xFF2A1515)
val tertiaryContainerDarkMediumContrast = Color(0xFFD4A5A5)
val onTertiaryContainerDarkMediumContrast = Color(0xFF000000)
val errorDarkMediumContrast = Color(0xFFFFB3AD)
val onErrorDarkMediumContrast = Color(0xFF330F0F)
val errorContainerDarkMediumContrast = Color(0xFFCD5C5C)
val onErrorContainerDarkMediumContrast = Color(0xFF000000)
val backgroundDarkMediumContrast = Color(0xFF1A1E1E)
val onBackgroundDarkMediumContrast = Color(0xFFE8E6E3)
val surfaceDarkMediumContrast = Color(0xFF242929)
val onSurfaceDarkMediumContrast = Color(0xFFFFFFFF)
val surfaceVariantDarkMediumContrast = Color(0xFF3A4040)
val onSurfaceVariantDarkMediumContrast = Color(0xFFE0DDD8)
val outlineDarkMediumContrast = Color(0xFFB8B5B0)
val outlineVariantDarkMediumContrast = Color(0xFF9A9694)
val scrimDarkMediumContrast = Color(0xFF000000)
val inverseSurfaceDarkMediumContrast = Color(0xFFE8E6E3)
val inverseOnSurfaceDarkMediumContrast = Color(0xFF2E3333)
val inversePrimaryDarkMediumContrast = Color(0xFF2A5F63)
val surfaceDimDarkMediumContrast = Color(0xFF1A1E1E)
val surfaceBrightDarkMediumContrast = Color(0xFF4A5050)
val surfaceContainerLowestDarkMediumContrast = Color(0xFF101414)
val surfaceContainerLowDarkMediumContrast = Color(0xFF282C2C)
val surfaceContainerDarkMediumContrast = Color(0xFF343939)
val surfaceContainerHighDarkMediumContrast = Color(0xFF3F4646)
val surfaceContainerHighestDarkMediumContrast = Color(0xFF4A5151)

val primaryDarkHighContrast = Color(0xFFECFEFE)
val onPrimaryDarkHighContrast = Color(0xFF000000)
val primaryContainerDarkHighContrast = Color(0xFF5DD4D0)
val onPrimaryContainerDarkHighContrast = Color(0xFF051F21)
val secondaryDarkHighContrast = Color(0xFFFFF4E6)
val onSecondaryDarkHighContrast = Color(0xFF000000)
val secondaryContainerDarkHighContrast = Color(0xFFFFD699)
val onSecondaryContainerDarkHighContrast = Color(0xFF140A02)
val tertiaryDarkHighContrast = Color(0xFFFFF0F1)
val onTertiaryDarkHighContrast = Color(0xFF000000)
val tertiaryContainerDarkHighContrast = Color(0xFFF2C4C8)
val onTertiaryContainerDarkHighContrast = Color(0xFF1A0A0A)
val errorDarkHighContrast = Color(0xFFFFF0EF)
val onErrorDarkHighContrast = Color(0xFF000000)
val errorContainerDarkHighContrast = Color(0xFFFFB3AD)
val onErrorContainerDarkHighContrast = Color(0xFF1F0505)
val backgroundDarkHighContrast = Color(0xFF1A1E1E)
val onBackgroundDarkHighContrast = Color(0xFFE8E6E3)
val surfaceDarkHighContrast = Color(0xFF242929)
val onSurfaceDarkHighContrast = Color(0xFFFFFFFF)
val surfaceVariantDarkHighContrast = Color(0xFF3A4040)
val onSurfaceVariantDarkHighContrast = Color(0xFFFFFFFF)
val outlineDarkHighContrast = Color(0xFFF0EDEA)
val outlineVariantDarkHighContrast = Color(0xFFD0CCC7)
val scrimDarkHighContrast = Color(0xFF000000)
val inverseSurfaceDarkHighContrast = Color(0xFFE8E6E3)
val inverseOnSurfaceDarkHighContrast = Color(0xFF000000)
val inversePrimaryDarkHighContrast = Color(0xFF0F3A3E)
val surfaceDimDarkHighContrast = Color(0xFF1A1E1E)
val surfaceBrightDarkHighContrast = Color(0xFF555C5C)
val surfaceContainerLowestDarkHighContrast = Color(0xFF000000)
val surfaceContainerLowDarkHighContrast = Color(0xFF2E3333)
val surfaceContainerDarkHighContrast = Color(0xFF3A4040)
val surfaceContainerHighDarkHighContrast = Color(0xFF454B4B)
val surfaceContainerHighestDarkHighContrast = Color(0xFF505656)

// Vintage accent colors for special elements
val vintageGold = Color(0xFFDAA520)
val vintageCream = Color(0xFFF5F5DC)
val vintageSepia = Color(0xFFDEB887)
val vintageLavender = Color(0xFFE6E6FA)
val vintageOlive = Color(0xFF9CAF88)

// Soft gradient colors for vintage effects
val vintageGradientStart = Color(0xFF71C9CE) // Your teal
val vintageGradientMiddle = Color(0xFFE0A96D) // Warm peach
val vintageGradientEnd = Color(0xFFD4A5A5) // Dusty rose